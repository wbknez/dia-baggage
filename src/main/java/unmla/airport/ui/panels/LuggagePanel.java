package unmla.airport.ui.panels;

import java.awt.BorderLayout;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import unmla.airport.LuggageTransporter;
import unmla.airport.simul.SimulationController;
import unmla.airport.ui.pick.PickData;
import unmla.airport.ui.pick.PickListener;
import unmla.airport.ui.table.LuggageTableModel;

/**
 * 
 */
public class LuggagePanel extends JPanel implements ListSelectionListener,
                                                     PickListener {

    /**
     * For serialization; generated by Eclipse.
     */
    private static final long serialVersionUID = -8142525210636260419L;
    
    private final SimulationController  controller;
    
    private final PickData              pickData;
    
    private final JTable                table;
    
    private final LuggageTableModel     tableModel;
    
    private LuggageTransporter          viewing;
    
    public LuggagePanel(final SimulationController controller) {
        if(controller == null) {
            throw new NullPointerException();
        }
        
        this.controller = controller;
        
        this.pickData = controller.getUiController().getPickData();
        
        final PickData pickData = controller.getUiController().getPickData();
        pickData.addListener(this);
        
        this.tableModel = new LuggageTableModel();
        this.table = new JTable(tableModel);
        
        this.table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.table.getSelectionModel().addListSelectionListener(this);
        
        final JScrollPane scrollPane = new JScrollPane(this.table, 
                JScrollPane.VERTICAL_SCROLLBAR_NEVER, 
                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        
        this.setLayout(new BorderLayout());
        this.add(scrollPane, BorderLayout.CENTER);
    }

    @Override
    public void onPick(PickData pickData) {
        final LuggageTransporter picked = pickData.getPicked();
        this.viewing = picked;
        
        this.update();
    }
    
    public void update() {
        this.tableModel.update(this.viewing);
        this.table.revalidate();
        
        if(!this.controller.isRunning()) {
            this.controller.requestRepaint();
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if(!e.getValueIsAdjusting()) {
            final ListSelectionModel selectionModel = 
                            (ListSelectionModel)e.getSource();
            
            if(selectionModel.isSelectionEmpty()) {
                this.pickData.setFollowedLuggage(null);
            }
            else {
                final int row = selectionModel.getMinSelectionIndex();
                this.pickData.setFollowedLuggage(this.tableModel.getLuggageAt(row));
            }
            
            if(!this.controller.isRunning()) {
                this.controller.requestRepaint();
            }
        }
    }
}
