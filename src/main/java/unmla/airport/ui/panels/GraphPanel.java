package unmla.airport.ui.panels;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;

import javax.swing.JPanel;

import unmla.airport.Airport;
import unmla.airport.LuggageRouter;
import unmla.airport.LuggageTransporter;
import unmla.airport.simul.SimulationController;
import unmla.airport.ui.AirportUiComponent;
import unmla.airport.ui.UiMouse;
import unmla.airport.ui.listeners.EdgePickedListener;
import unmla.airport.ui.listeners.VertexPickedListener;
import unmla.airport.ui.pick.ClearablePickState;
import unmla.airport.ui.predicate.ShowRouterPredicate;
import unmla.airport.ui.transformers.PositionTransformer;
import unmla.airport.ui.transformers.RouterDrawTransformer;
import unmla.airport.ui.transformers.RouterFillTransformer;
import unmla.airport.ui.transformers.RouterLabelTransformer;
import unmla.airport.ui.transformers.RouterShapeTransformer;
import unmla.airport.ui.transformers.RouterStrokeTransformer;
import unmla.airport.ui.transformers.TransporterDrawTransformer;
import unmla.airport.ui.transformers.TransporterStrokeTransformer;

import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.algorithms.layout.StaticLayout;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.CrossoverScalingControl;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ScalingControl;
import edu.uci.ics.jung.visualization.decorators.EdgeShape;

/**
 * 
 */
public class GraphPanel extends JPanel implements ComponentListener {

    /**
     * For serialization; generated by Eclipse.
     */
    private static final long serialVersionUID = 2246764627587380559L;
    
    /** */
    private final Layout<LuggageRouter, LuggageTransporter>              layout;
    /** */
    private final VisualizationViewer<LuggageRouter, LuggageTransporter> viewer;
    
    private final ModalGraphMouse
                                                                         mouse;
    
    private final ScalingControl                                         scaler;
    
    /**
     * 
     * @param controller
     */
    public GraphPanel(final SimulationController controller) {
        if(controller == null) {
            throw new NullPointerException();
        }
        
        final Airport airport = controller.getSimulation().getAirport();
        final AirportUiComponent airportUi = 
                                (AirportUiComponent)airport.getUiComponent();
        
        this.layout = new StaticLayout<LuggageRouter, LuggageTransporter>(
                                                    airport.getGraph(), 
                                                    new PositionTransformer(), 
                                                    new Dimension(
                                                   (int)airportUi.getWidth(), 
                                                   (int)airportUi.getHeight()));
        this.mouse = 
                new UiMouse(controller);
        this.scaler = new CrossoverScalingControl();
        this.viewer = new VisualizationViewer<LuggageRouter, LuggageTransporter>
                                                (this.layout);
        this.viewer.setGraphMouse(this.mouse);
        
        // rendering options
        this.viewer.setBackground(new Color(230, 230, 230));
        
        this.viewer.setPickedEdgeState(new ClearablePickState<LuggageTransporter>());
        this.viewer.setPickedVertexState(new ClearablePickState<LuggageRouter>());
        this.viewer.getPickedEdgeState().addItemListener(new EdgePickedListener(controller));
        this.viewer.getPickedVertexState().addItemListener(new VertexPickedListener(controller));
        
        this.viewer.getRenderContext().setArrowDrawPaintTransformer(new TransporterDrawTransformer(controller));
        this.viewer.getRenderContext().setArrowFillPaintTransformer(new TransporterDrawTransformer(controller));
        this.viewer.getRenderContext().setEdgeDrawPaintTransformer(new TransporterDrawTransformer(controller));
        this.viewer.getRenderContext().setEdgeShapeTransformer(new EdgeShape.Line<LuggageRouter, LuggageTransporter>());
        this.viewer.getRenderContext().setEdgeStrokeTransformer(new TransporterStrokeTransformer());
        
        this.viewer.getRenderContext().setVertexDrawPaintTransformer(new RouterDrawTransformer());
        this.viewer.getRenderContext().setVertexFillPaintTransformer(
                                                new RouterFillTransformer(controller));
        this.viewer.getRenderContext().setVertexIncludePredicate(new ShowRouterPredicate(controller));
        this.viewer.getRenderContext().setVertexLabelTransformer(
                                                new RouterLabelTransformer());
        this.viewer.getRenderContext().setVertexShapeTransformer(new RouterShapeTransformer());
        this.viewer.getRenderContext().setVertexStrokeTransformer(new RouterStrokeTransformer());

        this.viewer.setSize(new Dimension(500, 500));
        this.addComponentListener(this);
        this.add(this.viewer);
    }

    public VisualizationViewer<LuggageRouter, LuggageTransporter> getViewer() { 
        return this.viewer; 
    }
    
    /**
     * 
     * @param byWhat
     */
    public void scaleView(final float byWhat) {
        this.scaler.scale(this.viewer, byWhat, this.viewer.getCenter());
    }
    
    
    @Override
    public void componentHidden(ComponentEvent e) {
        if(e.getSource() == this) {
            this.viewer.setVisible(false);
        }
    }

    @Override
    public void componentMoved(ComponentEvent e) {

    }

    @Override
    public void componentResized(ComponentEvent e) {
        if(e.getSource() == this) {
            System.out.println("Resized!: " + e.getComponent().getSize());
            Component c = e.getComponent();
            this.viewer.setSize(c.getSize());
        }
    }

    @Override
    public void componentShown(ComponentEvent e) {
        if(e.getSource() == this) {
            this.viewer.setVisible(true);
        }
    }
}
